@model WMSAMG.Models.CSIS2017Models.TblStockWithdrawalDetail
@using Syncfusion.EJ2
@using Microsoft.AspNetCore.Identity
@using WMSAMG.Areas.Identity.Data

@inject SignInManager<WMSAMGUser> SignInManager
@inject UserManager<WMSAMGUser> UserManager
@{
    ViewData["Title"] = Model.ReferenceCode == Guid.Empty ? "Withdraw Stocks" : "Edit Withdrawn";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="jumbotron-fluid bg-light">
    <h2 class="text-left">@ViewData["Title"]</h2>
</div>
<p>@ViewBag.ErrorMsg</p>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="AddorEdit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" id="ReferenceCode" asp-for="ReferenceCode" />
            <div class="form-group">
                <ejs-textbox id="Rrcode" ejs-for="Swcode" readonly="true" cssClass="e-outline form-control" placeholder="SW No." floatLabelType="Always"></ejs-textbox>
                <span asp-validation-for="Swcode" class="text-danger"></span>
            </div>
            @*<div class="form-group">
            <ejs-textbox id="Rrcode" ejs-for="Rrcode" readonly="true" cssClass="e-outline form-control" placeholder="RR No." floatLabelType="Always"></ejs-textbox>
            <span asp-validation-for="Rrcode" class="text-danger"></span>
        </div>*@
            <div class="form-group">
                <ejs-textbox id="CustomerId" ejs-for="CustomerId" readonly="true" cssClass="e-outline" placeholder="Account No." floatLabelType="Always"></ejs-textbox>
                <span asp-validation-for="CustomerId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <ejs-dropdownlist id="CustomerName" ejs-for="CustomerName" cssClass="e-outline" change="onChange" placeholder="Account Name" popupHeight="220px" allowFiltering="true" filtering="onfiltering">
                    <e-dropdownlist-fields value="CustomerId" text="CustomerName"></e-dropdownlist-fields>
                </ejs-dropdownlist>
                <span asp-validation-for="CustomerName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <ejs-datetimepicker id="TransactionDate" ejs-for="TransactionDate" placeholder="Date Withdrawn" cssClass="e-outline" floatLabelType="Auto"></ejs-datetimepicker>
                <span asp-validation-for="TransactionDate" class="text-danger"></span>
            </div>


        </form>
    </div>
</div>

<ejs-grid id="Grid" allowPaging="true" allowFiltering="true" allowResizing="true" allowSorting="true" height="300" rowHeight="38" enableHover="false" rowSelected="rowSelect">
    <e-grid-aggregates>
        <e-grid-aggregate>
            <e-aggregate-columns>
                <e-aggregate-column field="Qty" type="Sum" format="N2" footerTemplate="${Sum}"></e-aggregate-column>
                <e-aggregate-column field="ActualWeight" type="Sum" format="N2" footerTemplate="${Sum}"></e-aggregate-column>
            </e-aggregate-columns>
        </e-grid-aggregate>
    </e-grid-aggregates>
    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
    <e-grid-filtersettings type="Menu"></e-grid-filtersettings>
    <e-grid-pagesettings pageCount="2"></e-grid-pagesettings>
    <e-grid-columns>
        <e-grid-column type="checkbox" width="50"></e-grid-column>
        <e-grid-column field="ReferenceCode" headerText="Ref Code" type="string" textAlign="Right" width="120" visible="false"></e-grid-column>
        <e-grid-column field="Rrcode" headerText="RR No." type="string" width="240"></e-grid-column>
        <e-grid-column field="StockId" headerText="Stock ID" type="string" visible="false" width="100"></e-grid-column>
        <e-grid-column field="StockSku" headerText="Stock SKU" type="string" width="140"></e-grid-column>
        <e-grid-column field="StockDescription" headerText="Description" type="string" width="180"></e-grid-column>
        <e-grid-column field="Qty" headerText="Qty" type="number" width="140" allowEditing="true"></e-grid-column>
        <e-grid-column field="ActualWeight" headerText="Actual Weight" textAlign="Right" allowEditing="true" type="number" format="N2" width="120"></e-grid-column>
        <e-grid-column field="PayTypeInitial" headerText="Pay Type" type="string" width="100"></e-grid-column>
        <e-grid-column field="TransactionDate" headerText="Received Date" format='MM/dd/yyyy' textAlign="Left" width="180"></e-grid-column>
        <e-grid-column field="StorageName" headerText="Storage" type="string" width="180" visible="false"></e-grid-column>
        <e-grid-column field="StorageLocationName" headerText="Storage Location" type="string" width="180"></e-grid-column>
    </e-grid-columns>
</ejs-grid>

<hr />
<div class="form-group">
    <input type="submit" id="btnsubmit" value="Submit" class="e-btn e-primary bg-success" />
    @*<input type="submit" id="Save" value="Submit" class="e-btn e-primary bg-success" />*@ |
    <a asp-action="Index" id="IndexAnchor" class="e-btn e-primary bg-info">Back to List</a>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
<script type="text/javascript" src="//code.jquery.com/jquery-1.10.2.min.js"></script>
<script type="text/javascript">

    function rowSelect() {
        //var obj = document.getElementsByClassName('e-grid')[0].ej2_instances[0];
        //alert(obj.getSelectedRecords()[0].StockSku);
    }

    document.addEventListener('DOMContentLoaded', function () {

        var dropdown = document.getElementById('CustomerName').ej2_instances[0]; // Grid instance
        var ajax = new ej.base.Ajax('/Withdrawal/GetCustomers', 'GET');
        ajax.send();
        ajax.onSuccess = function (data) {
            dropdown.dataSource = JSON.parse(data);
            dropdown.refresh();
        };

    }, false);

    function onfiltering(e) {
        var CBObj = document.getElementById("CustomerName").ej2_instances[0];
        // load overall data when search key empty.
        if (e.text == '')
            e.updateData(CBObj.dataSource);
        else {
            var query = new ej.data.Query().from('CustomerName').select(['CustomerName', 'CustomerId']);
            query = (e.text !== '') ? query.where('CustomerName', 'contains', e.text, true) : query;
            e.updateData(CBObj.dataSource, query);
        }
    }

    function onChange(args) {
        //console.log(args.value);
        //var options = {};
        //options.url = '/Withdrawal/GetCustomers';
        //options.type = "GET";
        //options.dataType = "json";
        //options.success = function (data) {
        //    data.forEach(function (element) {
        //        $('#StorageName').val(element.StorageName);
        //        $('#StorageLocationId').val(element.StorageLocationId);
        //        $('#StorageId').val(element.StorageId);
        //        $('#StorageTypeId').val(element.StorageTypeId);
        //        $('#FixedRate').val(element.FixedRate);
        //        $('#HourlyRate').val(element.HourlyRate);
        //        $("#DateTimeFrameFrom").val(getDateTime(0));
        //        return;
        //    });
        //};
        //options.error = function () {
        //    $("#msg").html("Error while calling the Web API!");
        //};
        //$.ajax(options);
        $("#CustomerId").val(args.value);
        $("#TransactionDate").val(getDateTime(0));
        var grid = document.getElementById('Grid').ej2_instances[0]; // Grid instance
        var ajax = new ej.base.Ajax('/Withdrawal/GetActualInventorybyCustomerID/' + args.value, 'GET');
        ajax.send();
        ajax.onSuccess = function (data) {
            grid.dataSource = JSON.parse(data);
            grid.hideSpinner();
        };
    }


    $(document).ready(function () {

        $('#btnsubmit').click(function () {
            var obj = document.getElementsByClassName('e-grid')[0].ej2_instances[0];
            if (obj.getSelectedRecords().length > 0) {
                //var data = obj.getSelectedRecords();
                var cnt = obj.getSelectedRecords().length;
                var i;
                var boolsuccess = false;
                var message = '';
                for (i = 0; i < cnt; i++) {
                    var storagerec = {};
                    storagerec.StorageTimeFrameId = obj.getSelectedRecords()[i].ReferenceCode;
                    storagerec.RefCode = obj.getSelectedRecords()[i].ReferenceCode;
                    storagerec.ReferenceNo = $('#Rrcode').val();
                    storagerec.Nature = $('#Nature').val();
                    storagerec.CustomerId = $('#CustomerId').val();
                    storagerec.PayTypeInitial = $('#PayTypeInitial').val();
                    storagerec.StockId = obj.getSelectedRecords()[i].StockId;
                    storagerec.StorageLocationId = $('#StorageLocationId').val();
                    storagerec.StorageId = $('#StorageId').val();
                    storagerec.StorageTypeId = $('#StorageTypeId').val();
                    storagerec.DateTimeFrameFrom = new Date($('#DateTimeFrameFrom').val());
                    storagerec.DateTimeFrameTo = new Date(null);
                    storagerec.FixedRate = parseFloat($('#FixedRate').val());
                    storagerec.HourlyRate = parseFloat($('#HourlyRate').val());
                    console.log(JSON.stringify(storagerec));
                    $.ajax({
                        type: 'POST',
                        url: '/Storaging/InsertTimeFrame',
                        data: JSON.stringify(storagerec),
                        contentType: "application/json",
                        dataType: 'json',
                        success: function (data) {
                            //boolsuccess = true;
                            message = JSON.stringify(data);
                            console.log(data);
                        }
                    });
                    storagerec = null;
                }

                if (boolsuccess = true) {
                    alert(cnt + ' Record/s Successfully Stored!');
                    $('#IndexAnchor')[0].click();
                }
            }
        })
    });


    function getDateTime(addHour) {
        var now = new Date();
        var year = now.getFullYear();
        var month = now.getMonth() + 1;
        var day = now.getDate();
        var hour = now.getHours() + addHour;
        var minute = now.getMinutes();
        var second = now.getSeconds();
        if (month.toString().length == 1) {
            month = '0' + month;
        }
        if (day.toString().length == 1) {
            day = '0' + day;
        }
        if (hour.toString().length == 1) {
            hour = '0' + hour;
        }
        if (minute.toString().length == 1) {
            minute = '0' + minute;
        }
        if (second.toString().length == 1) {
            second = '0' + second;
        }
        var dateTime = year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second;
        return dateTime;
    }

    var dReady = false;
    var theme;
    var dtTime = false;
    var isDataBound = false;
    var isDataChanged = true;
    var intervalFun;
    var clrIntervalFun;
    var clrIntervalFun1;
    var clrIntervalFun2;
    var dropSlectedIndex = null;
    var stTime;
    stTime = performance.now();

    function startTimer(args) {
        clearTimeout(clrIntervalFun);
        clearInterval(intervalFun);
        dtTime = true;
    }
</script>